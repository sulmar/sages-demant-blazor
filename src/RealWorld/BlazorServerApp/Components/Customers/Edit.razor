@page "/customers/edit/{id:int}"
@using Blazored.FluentValidation
@using FluentValidation
@inject ICustomerRepository repository
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject LocalStorage LocalStorage

<h3>Edit</h3>

@if (customer is null)
{
    <LoaderComponent Title="Loading customer...">
        <img src="https://placehold.co/300x300" />
    </LoaderComponent>
}
else
{
    <EditForm Model="@customer" OnValidSubmit="HandleUpdate" FormName="editCustomer" >

        @* <DataAnnotationsValidator /> *@

        <FluentValidationValidator />

        <ValidationSummary />

        <label for="name">Name: </label>
        <InputText id="name" @bind-Value="@customer.Name" />
        <ValidationMessage For="@(() => customer.Name)" />

        <label for="email">Email: </label>
        <InputText id="email" @bind-Value="@customer.Email" />
        <ValidationMessage For="@(() => customer.Email)" />

        <button type="submit" class="btn btn-primary">Save</button>

    </EditForm>

}


@code {

    [Parameter]
    public int Id { get; set; }

    private Customer customer;

    protected override async Task OnInitializedAsync()
    {
        if (customer is null)
            customer = await repository.GetByIdAsync(Id);

        var key = $"customer:{customer.Id}:email";
        var value = customer.Email;

        await LocalStorage.SetItem(key, value);

        var email = LocalStorage.GetItem(key);
    }

    private async Task HandleUpdate()
    {
        await repository.UpdateAsync(customer);
    }
}
